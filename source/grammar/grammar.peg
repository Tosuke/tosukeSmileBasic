Parser:
  line < statement (:":"? statement)* :EndOfProgram / :EndOfProgram #改行情報を格納する

  statement <- variableDefineStatement / assignStatement / commandStatement

  commandStatement < (identifier / "?") expr (commandDelimiter expr)* commandDelimiter? / (identifier / "?")
  commandDelimiter <- ";" / ","

  assignStatement < variable :"=" expr

  variableDefineStatement < :("var "i / "dim "i) (assignStatement / variable) (:"," (assignStatement / variable))*

  expr <- factor8

  #Arithmetic Expression
  factor8 < factor7 (logicalAndExpr / logicalOrExpr)*
  logicalAndExpr < :"&&" factor7
  logicalOrExpr < :"||" factor7

  factor7 < factor6 (andExpr / orExpr / xorExpr)*
  andExpr < :"and"i factor6
  orExpr < :"or"i factor6
  xorExpr < :"xor"i factor6

  factor6 < factor5 (eqExpr / notEqExpr / lessExpr / greaterExpr / lessEqExpr / greaterEqExpr)*
  eqExpr < :"==" factor5
  notEqExpr < :"!=" factor5
  lessExpr < :"<" factor5
  greaterExpr < :">" factor5
  lessEqExpr < :"<=" factor5
  greaterEqExpr < :">=" factor5

  factor5 < factor4 (leftShiftExpr / rightShiftExpr)*
  leftShiftExpr < :"<<" factor4
  rightShiftExpr < :">>" factor4

  factor4 < factor3 (addExpr / subExpr)*
  addExpr < :"+" factor3
  subExpr < :"-" factor3

  factor3 < factor2 (mulExpr / divExpr / intDivExpr / modExpr)*
  mulExpr < :"*" factor2
  divExpr < :"/" factor2
  intDivExpr < :"div"i factor2
  modExpr < :"mod"i factor2

  factor2 <- negExpr / notExpr / logicalNotExpr / primary
  negExpr < :"-" factor2
  notExpr < :"not"i factor2
  logicalNotExpr < :"!" factor2

  primary < :"(" expr :")" / value

  value <- decimalFloater / decimalInteger / hexInteger / binInteger /
          stringLiteral / variable
  decimalInteger <~digits
  decimalFloater <~(digits "." digits)
  hexInteger <~(:"&h"i hexDigit+)
  binInteger <~(:"&b"i [01]+)
  stringLiteral <~ doublequote (!doublequote .)* :doublequote?

  #Variable
  variable <- scalarVariable
  scalarVariable <- identifier

  identifier <~ [a-zA-Z_][a-zA-Z_0-9]*[%#$]?

  S <: space*
  EOL <- "\r\n" / "\n" / "\r"
  EndOfProgram <- !.
