Parser:
  doc < (statements)* :EndOfProgram

  statements <- statement (S :":"? S statement)* S :EOL+

  statement <- printStatement
  printStatement <- ("print "i / "?") S expr? (S printDelimiter S expr)* S printDelimiter?
  printDelimiter <- (";" / ",")

  expr <- factor8

  #Arithmetic Expression
  factor8 <- factor7 S (logicalAndExpr / logicalOrExpr)*
  logicalAndExpr <- :"&&" S factor7
  logicalOrExpr <- :"||" S factor7

  factor7 <- factor6 S (andExpr / orExpr / xorExpr)*
  andExpr <- :"and "i S factor6
  orExpr <- :"or "i S factor6
  xorExpr <- :"xor "i S factor6

  factor6 <- factor5 S (eqExpr / notEqExpr / lessExpr / greaterExpr / lessEqExpr / greaterEqExpr)*
  eqExpr <- :"==" S factor5
  notEqExpr <- :"!=" S factor5
  lessExpr <- :"<" S factor5
  greaterExpr <- :">" S factor5
  lessEqExpr <- :"<=" S factor5
  greaterEqExpr <- :">=" S factor5

  factor5 <- factor4 S (leftShiftExpr / rightShiftExpr)*
  leftShiftExpr <- :"<<" S factor4
  rightShiftExpr <- :">>" S factor4

  factor4 <- factor3 S (addExpr / subExpr)*
  addExpr <- :"+" S factor3
  subExpr <- :"-" S factor3

  factor3 <- factor2 S (mulExpr / divExpr / intDivExpr / modExpr)*
  mulExpr <- :"*" S factor2
  divExpr <- :"/" S factor2
  intDivExpr <- :"div "i S factor2
  modExpr <- :"mod "i S factor2

  factor2 <- negExpr / notExpr / logicalNotExpr / primary
  negExpr <- :"-" S factor2
  notExpr <- :"not"i S factor2
  logicalNotExpr <- :"!" factor2

  primary <- :"(" S expr S :")" / value

  value <- decimalFloater / decimalInteger / hexInteger / binInteger /
          stringLiteral
  decimalInteger <~digits
  decimalFloater <~(digits "." digits)
  hexInteger <~(:"&h"i hexDigit+)
  binInteger <~(:"&b"i [01]+)
  stringLiteral <~(:doublequote (!doublequote .)* :doublequote)

  S <: space*
  EOL <- "\r\n" / "\n" / "\r"
  EndOfProgram <- !.
